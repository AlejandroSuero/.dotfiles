#!/bin/bash

# Setting error throwing
set -e

# color codes
export RESTORE='\033[0m'
export NC='\033[0m'
export BLACK='\033[00;30m'
export RED='\033[00;31m'
export GREEN='\033[00;32m'
export YELLOW='\033[00;33m'
export BLUE='\033[00;34m'
export PURPLE='\033[00;35m'
export CYAN='\033[00;36m'
export SEA="\\033[38;5;49m"
export LIGHTGRAY='\033[00;37m'
export LBLACK='\033[01;30m'
export LRED='\033[01;31m'
export LGREEN='\033[01;32m'
export LYELLOW='\033[01;33m'
export LBLUE='\033[01;34m'
export LPURPLE='\033[01;35m'
export LCYAN='\033[01;36m'
export WHITE='\033[01;37m'
export OVERWRITE='\e[1A\e[K'

#emoji codes
export CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
export X_MARK="${RED}\xE2\x9C\x96${NC}"
export PIN="${RED}\xF0\x9F\x93\x8C${NC}"
export CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
export ARROW="${SEA}\xE2\x96\xB6${NC}"
export BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
export HOT="${ORANGE}\xF0\x9F\x94\xA5${NC}"
export WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"
export RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}"


DOTFILES_LOG="$HOME/.dotfiles.log"
DOTFILES_REPO="https://github.com/AlejandroSuero/.dotfiles.git"

# _header colorize the given argument with spacing
function _task {
  # if _task is called while a task was set, complete the previous
  if [[ $TASK != "" ]]; then
    printf "${OVERWRITE}${LGREEN} [OK]  ${LGREEN}${TASK}\n"
  fi
  # set new task title and print
  TASK=$1
  printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

# _cmd performs commands with error checking
function _cmd {
  #create log if it doesn't exist
  if ! [[ -f $DOTFILES_LOG ]]; then
    touch $DOTFILES_LOG
  fi
  # empty conduro.log
  > $DOTFILES_LOG
  # hide stdout, on error we print and exit
  if eval "$1" 1> /dev/null 2> $DOTFILES_LOG; then
    return 0 # success
  fi
  # read error from log and add spacing
  printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
  while read line; do
    printf "      ${line}\n"
  done < $DOTFILES_LOG
  printf "\n"
  # remove log file
  rm $DOTFILES_LOG
  # exit installation
  exit 1
}

function _clear_task {
  TASK=""
}

function _task_done {
  printf "${OVERWRITE}${LGREEN} [OK]  ${LGREEN}${TASK}\n"
  _clear_task
}

# Paths
CONFIG_DIR="$HOME/.config/dotfiles"
VAULT_SECRET="$HOME/.ansible-vault/vault.secret"
DOTFILES_DIR="$HOME/.dotfiles"
SSH_DIR="$HOME/.ssh"
IS_FIRST_RUN="$HOME/.dotfiles_run"

function ubuntu_setup() {
  if ! dpkg -s python3 >/dev/null 2>&1; then
    _task "Installing Python3"
    _cmd "sudo apt-get install -y python3"
  fi
  if ! dpkg -s python3-pip >/dev/null 2>&1; then
    _task "Installing Python3 Pip"
    _cmd "sudo apt-get install -y python3-pip"
  fi
  if ! dpkg -s ansible >/dev/null 2>&1; then
    _task "Installing Ansible"
    _cmd "sudo apt-get update"
    _cmd "python3 -m pip install --user ansible"
    _cmd "python3 -m pip install --user ansible-core"
    _cmd "python3 -m pip install --user argcomplete"
    _cmd "sudo activate-global-python-argcomplete3"
  fi

  _task "Setting Locale"
  _cmd "sudo localectl set-locale LANG=en_US.UTF-8"
}

function manjaro_setup() {
  if ! [ -x "$(command -v ansible)" ]; then
    _task "Installing Ansible"
    _cmd "sudo pacman -Sy --noconfirm"
    _cmd "sudo pacman -S --noconfirm ansible"
    _cmd "sudo pacman -S --noconfirm python-argcomplete"
    # _cmd "sudo activate-global-python-argcomplete3"
  fi
  if ! pacman -Q python3 >/dev/null 2>&1; then
    _task "Installing Python3"
    _cmd "sudo pacman -S --noconfirm python3"
  fi
  if ! pacman -Q python-pip >/dev/null 2>&1; then
    _task "Installing Python3 Pip"
    _cmd "sudo pacman -S --noconfirm python-pip"
  fi
  if ! pacman -Q openssh >/dev/null 2>&1; then
    _task "Installing OpenSSH"
    _cmd "sudo pacman -S --noconfirm openssh"
  fi

  if ! [ -x "$(command -v yay)" ]; then
    _task "Installing yay"
    _cmd "sudo pacman -S --needed base-devel git"
    _cmd "git clone https://aur.archlinux.org/yay-git.git '$HOME/yay'"
    _cmd "cd '$HOME/yay'"
    _cmd "makepkg -si"
    _cmd "cd $DOTFILES_DIR"
  fi

  _task "Setting Locale"
  _cmd "sudo localectl set-locale LANG=en_US.UTF-8"
}

function mac_setup() {
  if ! [ -x "$(command -v brew)" ]; then
    _task "Installing homebrew"
    _cmd '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
  fi
  if ! [ -x "$(command -v ansible)" ]; then
    _task "Installing ansible"
    _cmd "brew install ansible"
  fi
  if ! [ -x "$(command -v python3)" ]; then
    _task "Installing python"
    _cmd "brew install python"
  fi
  _task "Installing python dependencies"
  _cmd "brew install python-argcomplete"
}

update_ansible_galaxy() {
  local os=$1
  _task "Updating Ansible Galaxy for $os"
  _cmd "ansible-galaxy install -r $DOTFILES_DIR/requirements/common.yml"
}

OS="$(uname)"
ID=""
case $OS in
  Linux)
    source /etc/os-release
    ;;
  Darwin)
    ID=mac
    ;;
esac

_task "Loading Setup for detected OS: $ID"
case $ID in
  ubuntu)
    ubuntu_setup
    ;;
  debian)
    ubuntu_setup
    ;;
  manjaro)
    manjaro_setup
    ;;
  mac)
    mac_setup
    ;;
  *)
    _task "Unsupported OS"
    _cmd "echo 'Unsupported OS'"
    ;;
esac


if ! [[ -f "$SSH_DIR/authorized_keys" ]]; then
  _task "Generating SSH keys"
  _cmd "mkdir -p $SSH_DIR"
  _cmd "chmod 700 $SSH_DIR"
  _cmd "ssh-keygen -b 4096 -t rsa -f $SSH_DIR/ansible -N '' -C $USER@$HOSTNAME"
  _cmd "cat $SSH_DIR/ansible.pub >> $SSH_DIR/authorized_keys"
fi

if ! [[ -d "$DOTFILES_DIR" ]]; then
  _task "Cloning repository"
  _cmd "git clone --quiet $DOTFILES_REPO $DOTFILES_DIR"
else
  _task "Updating repository"
  _cmd "git -C $DOTFILES_DIR pull --quiet"
fi

pushd "$DOTFILES_DIR" 2>&1 > /dev/null
update_ansible_galaxy $ID

_task "Running playbook"; _task_done
if [[ -f $VAULT_SECRET ]]; then
  ansible-playbook --vault-password-file $VAULT_SECRET "$DOTFILES_DIR/main.yml" "$@"
else
  ansible-playbook "$DOTFILES_DIR/main.yml" "$@" -K
fi

popd 2>&1 > /dev/null

if ! [[ -f "$IS_FIRST_RUN" ]]; then
  echo -e "${CHECK_MARK} ${GREEN}First run complete!${NC}"
  echo -e "${ARROW} ${CYAN}Please reboot your computer to complete the setup.${NC}"
  touch "$IS_FIRST_RUN"
fi

# vi:ft=sh
